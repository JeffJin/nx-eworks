apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: adworks-nfs
  labels:
    app: adworks-nfs
spec:
  # TODO: Investigate how/if nfs-provisioner can be scaled out beyond 1 replica
  replicas: 1
  selector:
    matchLabels:
      app: adworks-nfs
  serviceName: nfs-server-provisioner
  template:
    metadata:
      labels:
        app: adworks-nfs
    spec:
      # NOTE: This is 10 seconds longer than the default nfs-provisioner --grace-period value of 90sec
      terminationGracePeriodSeconds: 100
      serviceAccountName: "nfs-server-provisioner"
      containers:
      - name: nfs-server-provisioner
        image: "quay.io/kubernetes_incubator/nfs-provisioner:v1.0.9"
        imagePullPolicy: IfNotPresent
        ports:
        - name: nfs
          containerPort: 2049
          protocol: TCP
        - name: mountd
          containerPort: 20048
          protocol: TCP
        - name: rpcbind-tcp
          containerPort: 111
          protocol: TCP
        - name: rpcbind-udp
          containerPort: 111
          protocol: UDP
        securityContext:
          capabilities:
            add:
            - DAC_READ_SEARCH
            - SYS_RESOURCE
        args:
        - "-provisioner=nfs-server-provisioner"
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SERVICE_NAME
          value: adworks-nfs
        - name: POD_NAMESPACE
          value: kube-system
        volumeMounts:
        - name: data
          mountPath: /export
        resources: {}

      volumes:
      - name: data
        iscsi:
          targetPortal: 192.168.98.40:3260
          portals: []
          iqn: iqn.2005-10.org.freenas.nasking.ctl:target.k8s-dev
          lun: 0
          fsType: ext4
          readOnly: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: adworks-nfs
  name: nfs-server-provisioner
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nfs-server-provisioner
  labels:
    app: adworks-nfs
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["services", "endpoints"]
    verbs: ["get"]
  - apiGroups: ["extensions"]
    resources: ["podsecuritypolicies"]
    resourceNames: ["nfs-server-provisioner"]
    verbs: ["use"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: adworks-nfs
  name: nfs-server-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nfs-server-provisioner
subjects:
  - kind: ServiceAccount
    name: nfs-server-provisioner
    namespace: kube-system
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: nfs
  labels:
    app: adworks-nfs
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs-server-provisioner
---
apiVersion: v1
kind: Service
metadata:
  name: adworks-nfs
  labels:
    app: adworks-nfs
spec:
  type: ClusterIP
  ports:
    - port: 2049
      targetPort: nfs
      protocol: TCP
      name: nfs
    - port: 20048
      targetPort: mountd
      protocol: TCP
      name: mountd
    - port: 51413
      targetPort: rpcbind-tcp
      protocol: TCP
      name: rpcbind-tcp
    - port: 51413
      targetPort: rpcbind-udp
      protocol: UDP
      name: rpcbind-udp
  selector:
    app: adworks-nfs

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using adworks.data_services;

namespace adworks.dataservices.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    partial class CommonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("adworks.data_services.DbModels.Appointment", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("LocationId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organizer")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Audio", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CategoryId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CloudUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1024)");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<string>("EncodedFilePath")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("RawFilePath")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Tags")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasAlternateKey("CloudUrl")
                        .HasName("AK_Audio_CloudUrl");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EncodedFilePath")
                        .IsUnique();

                    b.HasIndex("RawFilePath")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Category", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Device", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset?>("ActivatedOn")
                        .HasColumnType("timestamp");

                    b.Property<int>("AppVersion")
                        .HasColumnType("int");

                    b.Property<string>("AssetTag")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("DeviceGroupId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("DeviceVersion")
                        .HasColumnType("int");

                    b.Property<byte[]>("LocationId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceGroupId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.DeviceGroup", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<byte[]>("OrganizationId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DeviceGroups");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.DeviceStatus", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("DeviceId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("DeviceStatuses");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Image", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CategoryId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CloudUrl")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1024)");

                    b.Property<byte[]>("ProductId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("RawFilePath")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Tags")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CloudUrl")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("RawFilePath")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.License", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("DeviceId")
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("ExpireOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Location", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<double>("TimezoneOffset")
                        .HasColumnType("double");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.MergeRecord", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("AssetId1")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("AssetId2")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("MergeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MergeRecords");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Order", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(767)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.OrderItem", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("OrderId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProductId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Organization", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Payment", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("OrderId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Playlist", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.PlaylistGroup", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("DeviceGroupId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeviceGroupId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PlaylistGroups");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.PlaylistItem", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("AssetDiscriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<byte[]>("MediaAssetId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("SubPlaylistId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubPlaylistId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Product", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<byte[]>("ProductCategoryId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Record", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<byte[]>("MediaAssetId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("StartedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.SubCategory", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.SubPlaylist", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<byte[]>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SubPlaylists");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Video", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CategoryId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1024)");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<string>("EncodedVideoPath")
                        .HasColumnType("varchar(1024)");

                    b.Property<byte[]>("ProductId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("ProgressiveVideoUrl")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("RawFilePath")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Tags")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ThumbnailLink")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp");

                    b.Property<string>("VodVideoUrl")
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("RawFilePath")
                        .IsUnique();

                    b.HasIndex("ThumbnailLink")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("VodVideoUrl")
                        .IsUnique();

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("adworks.data_services.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("adworks.data_services.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("adworks.data_services.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("OrganizationId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfileLogo")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email")
                        .HasName("AK_Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Appointment", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Location", "Location")
                        .WithMany("Appointments")
                        .HasForeignKey("LocationId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Audio", b =>
                {
                    b.HasOne("adworks.data_services.DbModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Device", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.DeviceGroup", "DeviceGroup")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("adworks.data_services.DbModels.Location", "Location")
                        .WithMany("Devices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeviceGroup");

                    b.Navigation("Location");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.DeviceGroup", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Organization", "Organization")
                        .WithMany("DeviceGroups")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_group_org_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Organization");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.DeviceStatus", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Device");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Image", b =>
                {
                    b.HasOne("adworks.data_services.DbModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.License", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Device", "Device")
                        .WithMany("Licenses")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Device");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Location", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.MergeRecord", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Order", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.OrderItem", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adworks.data_services.DbModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Organization", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Payment", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Playlist", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.PlaylistGroup", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.DeviceGroup", "DeviceGroup")
                        .WithMany("PlaylistGroups")
                        .HasForeignKey("DeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adworks.data_services.DbModels.Playlist", "Playlist")
                        .WithMany("PlaylistGroups")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeviceGroup");

                    b.Navigation("Playlist");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.PlaylistItem", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.SubPlaylist", "SubPlaylist")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("SubPlaylistId")
                        .HasConstraintName("fk_sub_playlist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("SubPlaylist");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Product", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.SubCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ProductCategory");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Record", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.SubCategory", b =>
                {
                    b.HasOne("adworks.data_services.DbModels.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.SubPlaylist", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Playlist", "Playlist")
                        .WithMany("SubPlaylists")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("fk_playlist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Playlist");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Video", b =>
                {
                    b.HasOne("adworks.data_services.DbModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("adworks.data_services.Identity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("adworks.data_services.DbModels.Product", null)
                        .WithMany("Videos")
                        .HasForeignKey("ProductId");

                    b.HasOne("adworks.data_services.Identity.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("adworks.data_services.Identity.RoleClaim", b =>
                {
                    b.HasOne("adworks.data_services.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("adworks.data_services.Identity.User", b =>
                {
                    b.HasOne("adworks.data_services.DbModels.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_user_org_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserClaim", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserLogin", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserRole", b =>
                {
                    b.HasOne("adworks.data_services.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("adworks.data_services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("adworks.data_services.Identity.UserToken", b =>
                {
                    b.HasOne("adworks.data_services.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Device", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.DeviceGroup", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("PlaylistGroups");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Location", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Organization", b =>
                {
                    b.Navigation("DeviceGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Playlist", b =>
                {
                    b.Navigation("PlaylistGroups");

                    b.Navigation("SubPlaylists");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("adworks.data_services.DbModels.SubPlaylist", b =>
                {
                    b.Navigation("PlaylistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
